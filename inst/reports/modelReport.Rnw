%-------------------------------------------------------------------------------
%	Packages and other Document configurations
%-------------------------------------------------------------------------------
\documentclass[a4paper,11pt]{article}
% Package declaration
%-------------------------------------------------------------------------------
% Specify input encoding
\usepackage[utf8]{inputenc}
% For A4 paper set all margins to 3cm
\usepackage[paper=a4paper,left=1.5cm,top=2cm,right=1.5cm,bottom=2cm]{geometry}%
% Set linespace, usage \doublespacing \singlespacing \onehalfspacing
\usepackage{setspace}%
% Set palatino font with small caps as default
\usepackage[sc]{mathpazo}%
% Rotation tools, including rotated full-page floats.
\usepackage{rotating}%
% Create subfigures
\usepackage{subfigure}%
% Extensive support for hypertext in LaTeX
\usepackage{hyperref}%
% For adding bookmarks to the document
\usepackage{bookmark}%
% For adding time to the document
\usepackage{datetime}
% For alignment of captions
\usepackage{caption}
% For multiple columns.
\usepackage{multicol}

% Start Article header
%-------------------------------------------------------------------------------
% Title
\title{Single trial analysis for \Sexpr{escapeLatex(x$traits)}}%
% Authors
\author{\vspace{-5ex}}
%-------------------------------------------------------------------------------
% Dates
\date{\vspace{-5ex}}
%-------------------------------------------------------------------------------
% End article header

% For left aligning captions
\captionsetup{justification=raggedright,singlelinecheck=false}

% Start Document
%-------------------------------------------------------------------------------
\begin{document}

% Load required packages
<<label=setup, include=FALSE, cache=FALSE>>=
lapply(list("SpATS"), library, character.only = TRUE)
trial <- list(...)$trial
descending <- list(...)$descending
@
<<label=extractInfo, echo=FALSE, include=FALSE>>=
## Extract basic modelling information
engine <- x[[trial]]$engine
trait <- x[[trial]]$traits
if (is.null(x[[trial]]$mFix)) {
  model <- x[[trial]]$mRand[[1]]
  modelType <- "random"
  predName <- "BLUPs"
} else {
  model <- x[[trial]]$mFix[[1]]
  modelType <- "fixed"
  predName <- "BLUEs"
}
## Get use of checkId from model call.
useCheckId <- (engine == "SpATS" && length(grep(pattern = "checkId",
                                                x = deparse(model$model$fixed))) > 0) ||
  (engine %in% c("asreml", "lme4") && length(grep(pattern = "+ checkId +",
                                                  x = getCall(model))) > 0)
@

% Article title, Authors and Affiliations
\maketitle
%\newpage

% Start single line spacing
\singlespacing

%-------------------------------------------------------------------------------
\section{General information}
%-------------------------------------------------------------------------------
<<label=general, echo=FALSE, results="asis">>=
bgItems <- c(format(attr(x, "timestamp"), "%y-%m-%d %H:%M:%S"),
             as.character(packageVersion("RAP")),
             engine)
names(bgItems) <- c("Analysis done on",
                    "Pipeline version",
                    "Mixed model engine")
print(xtable::xtable(x = data.frame(bgItems), label = "general",
                     align = c("l", "l")),
      latex.environments = "flushleft", hline.after = NULL,
      include.rownames = TRUE, include.colnames = FALSE)
@

%-------------------------------------------------------------------------------
\section{Description of the fitted model}
%-------------------------------------------------------------------------------

<<label=modelDescription, echo=FALSE, results="asis">>=
modelDesigns <- c("block (R)",
                  "replicate (F) + block(replicate) (R)",
                  "replicate (F)",
                  "row (R) + col (R)",
                  "replicate (F) + row(replicate) (R) + col(replicate) (R)")
names(modelDesigns) <- c("ibd", "res.ibd", "rcbd", "rowcol", "res.rowcol")
if (useCheckId) {
  modelDesigns <- paste("checkId (F) +", modelDesigns)
}
descrItems <- c(trait, modelDesigns[x[[trial]]$design],
                if (is.null(x[[trial]]$spatial)) "id" else
                  as.character(x[[trial]]$spatial[1]),
                modelType)
names(descrItems) <- c("Trait",
                       "Experimental design features",
                       "Spatial model",
                       "Genotype")
print(xtable::xtable(x = data.frame(descrItems), label = "modelDescription",
                     align = c("l", "l")),
      latex.environments = "flushleft", hline.after = NULL,
      include.rownames = TRUE, include.colnames = FALSE)
@
\newpage
%-------------------------------------------------------------------------------
\section{Summary of the results}
%-------------------------------------------------------------------------------
<<label=extrSummary, echo=FALSE, results="hide">>=
## Create summary SpATS in seperate chunck to suppress output.
if (engine == "SpATS") {
  SpATSSum <- summary(model)
}
@
<<label=summary, echo=FALSE, results="asis">>=
modSum <- as.data.frame(summary(x[[trial]]$TD, traits = trait))
modSum <- modSum[!is.na(modSum$Freq), ]
print(xtable::xtable(x = modSum[, c(1, 3)],
                     caption = "Size of the data set and eight number descriptives",
                     label = "modelSummary",
                     align = c("l", "l", "r")),
      latex.environments = "flushleft", caption.placement = "top",
      include.rownames = FALSE, include.colnames = FALSE)
@
<<label=condNewpage, echo=FALSE, results="asis">>=
if (engine == "SpATS") {
  cat("\\newpage")
}
@
<<label=SpATSsummary, echo=FALSE, results="asis">>=
renameFrom <- c("genotype", "repId", "rowId", "colId", "subBlock",
                "repId:rowId", "repId:colId", "repId:subBlock",
                "colCoord", "rowCoord", "rowCoordcolCoord",
                "f(colCoord)", "f(rowCoord)",
                "f(colCoord):rowCoord",
                "colCoord:f(rowCoord)",
                "f(colCoord):f(rowCoord)", "Nobs", "R", "variance",
                "pow", "units")
renameTo <- c("Genotype", "Replicate", "Row", "Col", "Block",
              "Row(replicate)", "Col(replicate)", "Block(replicate)",
              "Linear trend along cols", "Linear trend along rows",
              "Linear trend along rows and cols",
              "Smooth trend along cols", "Smooth trend along rows",
              "Linear trend in rows changing smoothly along cols",
              "Linear trend in cols changing smoothly along rows",
              "Smooth-by-smooth interaction trend over rows and cols",
              "Number of observations", "Residual", "Residual", "Power",
              "Units")
if (engine == "SpATS") {
  ## Print table of effective dimensions
  effDims <- SpATSSum$p.table.dim
  rownames(effDims)[is.na(rownames(effDims))] <- ""
  for (i in 1:length(renameFrom)) {
    rownames(effDims)[which(rownames(effDims) == renameFrom[i])] <- renameTo[i]
  }
  print(xtable::xtable(x = effDims, caption = "Effective dimensions",
                       label = "effDims",
                       align = c("l", "r", "r", "r", "r", "r")),
        latex.environments = "flushleft", caption.placement = "top",
        include.rownames = TRUE)
  ## Print generalized heritability
  if (modelType == "random") {
    cat(paste("The generalized heritability is",
              round(STExtract(x, trials = trial,
                              what = "heritability")[[1]], 2)))
  }
  ## Print table of variance components.
  varComp <- SpATSSum$p.table.vc
  rownames(varComp)[is.na(rownames(varComp))] <- ""
  for (i in 1:length(renameFrom)) {
    rownames(varComp)[which(rownames(varComp) == renameFrom[i])] <- renameTo[i]
  }
  varComp <- data.frame(Variance = as.numeric(varComp[, 1]),
                        row.names = rownames(varComp))
  print(xtable::xtable(x = varComp, label = "varComps",
                       caption =  "Variance components",
                       align = c("l", "r")),
        latex.environments = "flushleft", caption.placement = "top",
        include.rownames = TRUE)
} else if (engine == "lme4") {
  if (inherits(model, "lm")) {
    ## In this case there is only residual variance since there are no
    ## random effects.
    varComp <- data.frame(name = "Residual", Variance = summary(model)$sigma ^ 2)
  } else {
    varComp <- as.data.frame(lme4::VarCorr(model))[, c("grp", "vcov")]
    for (i in 1:length(renameFrom)) {
      varComp$grp[varComp$grp == renameFrom[i]] <- renameTo[i]
    }
    if (nrow(varComp) > 1) {
      varComp <- tibble::add_row(.data = varComp,
                                 .before = which(varComp$grp == "Residual"))
    }
  }
  colnames(varComp) <- c("", "Variance")
  print(xtable::xtable(x = varComp, label = "varComps",
                       caption =  "Variance components",
                       align = c("l", "l", "c")),
        latex.environments = "flushleft", caption.placement = "top",
        include.rownames = FALSE)
} else if (engine == "asreml") {
  varComp <- summary(model)$varcomp[, c("component", "std.error")]
  rownames(varComp) <- sapply(X = strsplit(x = rownames(varComp), split = "[!.]+"),
                              FUN = function(split) {
                                if (split[[1]] == "R") {
                                  return(split[[2]])
                                } else {
                                  return(split[[1]])
                                }
                              })
  for (i in 1:length(renameFrom)) {
    rownames(varComp)[which(rownames(varComp) == renameFrom[i])] <- renameTo[i]
  }
  if ("Genotype" %in% rownames(varComp)) {
    varComp <- rbind(varComp["Genotype", , drop = FALSE],
                     varComp[rownames(varComp) != "Genotype", , drop = FALSE])
  }
  varComp <- tibble::rownames_to_column(varComp)
  if (nrow(varComp) > 1) {
    varComp <- tibble::add_row(.data = varComp,
                               .before = which(varComp$rowname == "Residual"))
  }
  colnames(varComp) <- c("", "Variance", "SE")
  print(xtable::xtable(x = varComp, label = "varComps",
                       caption =  "Variance components",
                       align = c("l", "l", "r", "r")),
        latex.environments = "flushleft", caption.placement = "top",
        include.rownames = FALSE)
}
@
\clearpage

%-------------------------------------------------------------------------------
\section{Diagnostic plots}
%-------------------------------------------------------------------------------
<<label=spatialPlots, echo=FALSE, results="asis", out.width="90%">>=
if (all(c("colId", "rowId") %in% colnames(x[[trial]]$TD[[trial]]))) {
  plot(x, trial = trial, what = modelType, plotType = "spatial")
}
@
<<label=basePlots, echo=FALSE, out.width="90%">>=
## Base diagnostic plots, identical for all models
plot(x, trial = trial, what = modelType, plotType = "base")
@
\newpage

%-------------------------------------------------------------------------------
\section{List of best 10\% genotypes with
\Sexpr{paste(ifelse(descending, "highest", "lowest"), predName)}}
%-------------------------------------------------------------------------------
<<label=best10perc, echo=FALSE, results="hide">>=
predSE <- STExtract(x, what = paste0("se", predName))[[trial]]
predTot <- STExtract(x, what = predName)[[trial]] %>%
  dplyr::inner_join(predSE , by = "genotype") %>%
  dplyr::arrange_(paste0(ifelse(descending, "desc(", ""),
                        trait,".x", ifelse(descending, ")", ""))) %>%
  setNames(c("genotype", trait, "SE"))
best <- predTot[1:ceiling(nrow(predTot) / 10), ]
@
\begin{multicols*}{2}
<<label=printBest10pct, echo=FALSE, results="asis">>=
print(xtable::xtable(x = best, label = "bestTab",
                     align = c("l", "l", "c", "c"), digits = c(0, 0, 2, 2)),
      latex.environments = "flushleft",
      include.rownames = FALSE, floating = FALSE)
@
\columnbreak
<<label=predPlot, echo=FALSE, out.width="90%">>=
## Plot of predictions, BLUEs or BLUPs
plot(rev(predTot[[trait]]), col = "#0080ff", xlab = "Genotypes", xaxt = "n",
     cex.lab = 1.5, ylab = trait, mar = c(5, 5, 4, 2) + 0.1)
abline(h = quantile(x = na.omit(predTot[[trait]]), probs = 0.9), col = "red")
abline(h = quantile(x = na.omit(predTot[[trait]]), probs = 0.1), col = "red")
@
\end{multicols*}
%-------------------------------------------------------------------------------
% End Document
\end{document}
